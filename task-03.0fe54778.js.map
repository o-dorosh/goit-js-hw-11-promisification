{"version":3,"sources":["../node_modules/process/browser.js","../node_modules/q/q.js","js/task-03.js"],"names":["cachedSetTimeout","cachedClearTimeout","process","module","exports","defaultSetTimout","Error","defaultClearTimeout","runTimeout","fun","setTimeout","e","call","runClearTimeout","marker","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","length","concat","drainQueue","timeout","len","run","Item","array","noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","definition","bootstrap","define","amd","ses","ok","makeQ","window","self","global","previousQ","Q","noConflict","hasStacks","stack","qStartingLine","qFileName","captureLine","head","task","next","tail","flushing","requestTick","isNodeJS","laterQueue","flush","domain","enter","runSingle","pop","exit","toString","setImmediate","bind","MessageChannel","channel","port1","onmessage","requestPortTick","port2","postMessage","runAfter","Function","uncurryThis","f","array_slice","QReturnValue","slice","array_reduce","reduce","callback","basis","index","TypeError","array_indexOf","indexOf","value","array_map","map","thisp","collect","undefined","object_create","Object","create","Type","object_defineProperty","defineProperty","obj","prop","descriptor","object_hasOwnProperty","hasOwnProperty","object_keys","keys","object","key","object_toString","ReturnValue","STACK_JUMP_SEPARATOR","makeStackTraceLong","error","promise","stacks","p","source","__minimumStackCounter__","stackCounter","configurable","unshift","concatedStacks","filterStackString","stackString","lines","split","desiredLines","line","isInternalFrame","stackLine","isNodeFrame","join","getFileNameAndLineNumber","attempt1","exec","Number","attempt2","attempt3","fileNameAndLineNumber","fileName","lineNumber","qEndingLine","Promise","isPromiseAlike","deferred","defer","then","resolve","reject","notify","exception","fulfill","coerce","longStackSupport","longStackCounter","messages","resolvedPromise","progressListeners","promiseDispatch","op","operands","valueOf","nearerValue","nearer","isPromise","inspect","state","substring","become","newPromise","message","reason","progress","progressListener","resolver","race","answerPs","fallback","result","inspected","when","fulfilled","rejected","progressed","isObject","makeNodeResolver","all","passByCopy","x","y","that","spread","makePromise","done","_fulfilled","_rejected","newException","newValue","threw","_progressed","onerror","tap","fcall","thenResolve","thenReject","isPending","isFulfilled","isRejected","unhandledReasons","alternative","unhandledRejections","reportedUnhandledRejections","trackUnhandledRejections","resetUnhandledRejections","rejection","untrackRejection","at","atReport","splice","trackRejection","rhs","dispatch","promises","pendingCount","snapshot","any","prev","current","onFulfilled","onRejected","err","onProgress","allResolved","getUnhandledReasons","stopUnhandledRejectionTracking","master","async","makeGenerator","continuer","verb","arg","StopIteration","generator","errback","isStopIteration","spawn","_return","promised","get","set","del","mapply","post","send","mcall","invoke","fapply","fbind","console","warn","allSettled","regardless","fail","fin","onUnhandledError","ms","timeoutId","code","delay","nfapply","nodeArgs","nfcall","nfbind","denodeify","baseArgs","nbind","bound","nmapply","npost","nsend","nmcall","ninvoke","nodeify","nodeback","require","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","time","log","logError","amount","catch"],"mappings":"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","file":"task-03.0fe54778.js","sourceRoot":"../src","sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","// vim:ts=4:sts=4:sw=4:\n/*!\n *\n * Copyright 2009-2017 Kris Kowal under the terms of the MIT\n * license found at https://github.com/kriskowal/q/blob/v1/LICENSE\n *\n * With parts by Tyler Close\n * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found\n * at http://www.opensource.org/licenses/mit-license.html\n * Forked at ref_send.js version: 2009-05-11\n *\n * With parts by Mark Miller\n * Copyright (C) 2011 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n(function (definition) {\n    \"use strict\";\n\n    // This file will function properly as a <script> tag, or a module\n    // using CommonJS and NodeJS or RequireJS module formats.  In\n    // Common/Node/RequireJS, the module exports the Q API and when\n    // executed as a simple <script>, it creates a Q global instead.\n\n    // Montage Require\n    if (typeof bootstrap === \"function\") {\n        bootstrap(\"promise\", definition);\n\n    // CommonJS\n    } else if (typeof exports === \"object\" && typeof module === \"object\") {\n        module.exports = definition();\n\n    // RequireJS\n    } else if (typeof define === \"function\" && define.amd) {\n        define(definition);\n\n    // SES (Secure EcmaScript)\n    } else if (typeof ses !== \"undefined\") {\n        if (!ses.ok()) {\n            return;\n        } else {\n            ses.makeQ = definition;\n        }\n\n    // <script>\n    } else if (typeof window !== \"undefined\" || typeof self !== \"undefined\") {\n        // Prefer window over self for add-on scripts. Use self for\n        // non-windowed contexts.\n        var global = typeof window !== \"undefined\" ? window : self;\n\n        // Get the `window` object, save the previous Q global\n        // and initialize Q as a global.\n        var previousQ = global.Q;\n        global.Q = definition();\n\n        // Add a noConflict function so Q can be removed from the\n        // global namespace.\n        global.Q.noConflict = function () {\n            global.Q = previousQ;\n            return this;\n        };\n\n    } else {\n        throw new Error(\"This environment was not anticipated by Q. Please file a bug.\");\n    }\n\n})(function () {\n\"use strict\";\n\nvar hasStacks = false;\ntry {\n    throw new Error();\n} catch (e) {\n    hasStacks = !!e.stack;\n}\n\n// All code after this point will be filtered from stack traces reported\n// by Q.\nvar qStartingLine = captureLine();\nvar qFileName;\n\n// shims\n\n// used for fallback in \"allResolved\"\nvar noop = function () {};\n\n// Use the fastest possible means to execute a task in a future turn\n// of the event loop.\nvar nextTick =(function () {\n    // linked list of tasks (single, with head node)\n    var head = {task: void 0, next: null};\n    var tail = head;\n    var flushing = false;\n    var requestTick = void 0;\n    var isNodeJS = false;\n    // queue for late tasks, used by unhandled rejection tracking\n    var laterQueue = [];\n\n    function flush() {\n        /* jshint loopfunc: true */\n        var task, domain;\n\n        while (head.next) {\n            head = head.next;\n            task = head.task;\n            head.task = void 0;\n            domain = head.domain;\n\n            if (domain) {\n                head.domain = void 0;\n                domain.enter();\n            }\n            runSingle(task, domain);\n\n        }\n        while (laterQueue.length) {\n            task = laterQueue.pop();\n            runSingle(task);\n        }\n        flushing = false;\n    }\n    // runs a single function in the async queue\n    function runSingle(task, domain) {\n        try {\n            task();\n\n        } catch (e) {\n            if (isNodeJS) {\n                // In node, uncaught exceptions are considered fatal errors.\n                // Re-throw them synchronously to interrupt flushing!\n\n                // Ensure continuation if the uncaught exception is suppressed\n                // listening \"uncaughtException\" events (as domains does).\n                // Continue in next event to avoid tick recursion.\n                if (domain) {\n                    domain.exit();\n                }\n                setTimeout(flush, 0);\n                if (domain) {\n                    domain.enter();\n                }\n\n                throw e;\n\n            } else {\n                // In browsers, uncaught exceptions are not fatal.\n                // Re-throw them asynchronously to avoid slow-downs.\n                setTimeout(function () {\n                    throw e;\n                }, 0);\n            }\n        }\n\n        if (domain) {\n            domain.exit();\n        }\n    }\n\n    nextTick = function (task) {\n        tail = tail.next = {\n            task: task,\n            domain: isNodeJS && process.domain,\n            next: null\n        };\n\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n\n    if (typeof process === \"object\" &&\n        process.toString() === \"[object process]\" && process.nextTick) {\n        // Ensure Q is in a real Node environment, with a `process.nextTick`.\n        // To see through fake Node environments:\n        // * Mocha test runner - exposes a `process` global without a `nextTick`\n        // * Browserify - exposes a `process.nexTick` function that uses\n        //   `setTimeout`. In this case `setImmediate` is preferred because\n        //    it is faster. Browserify's `process.toString()` yields\n        //   \"[object Object]\", while in a real Node environment\n        //   `process.toString()` yields \"[object process]\".\n        isNodeJS = true;\n\n        requestTick = function () {\n            process.nextTick(flush);\n        };\n\n    } else if (typeof setImmediate === \"function\") {\n        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate\n        if (typeof window !== \"undefined\") {\n            requestTick = setImmediate.bind(window, flush);\n        } else {\n            requestTick = function () {\n                setImmediate(flush);\n            };\n        }\n\n    } else if (typeof MessageChannel !== \"undefined\") {\n        // modern browsers\n        // http://www.nonblocking.io/2011/06/windownexttick.html\n        var channel = new MessageChannel();\n        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create\n        // working message ports the first time a page loads.\n        channel.port1.onmessage = function () {\n            requestTick = requestPortTick;\n            channel.port1.onmessage = flush;\n            flush();\n        };\n        var requestPortTick = function () {\n            // Opera requires us to provide a message payload, regardless of\n            // whether we use it.\n            channel.port2.postMessage(0);\n        };\n        requestTick = function () {\n            setTimeout(flush, 0);\n            requestPortTick();\n        };\n\n    } else {\n        // old browsers\n        requestTick = function () {\n            setTimeout(flush, 0);\n        };\n    }\n    // runs a task after all other tasks have been run\n    // this is useful for unhandled rejection tracking that needs to happen\n    // after all `then`d tasks have been run.\n    nextTick.runAfter = function (task) {\n        laterQueue.push(task);\n        if (!flushing) {\n            flushing = true;\n            requestTick();\n        }\n    };\n    return nextTick;\n})();\n\n// Attempt to make generics safe in the face of downstream\n// modifications.\n// There is no situation where this is necessary.\n// If you need a security guarantee, these primordials need to be\n// deeply frozen anyway, and if you don’t need a security guarantee,\n// this is just plain paranoid.\n// However, this **might** have the nice side-effect of reducing the size of\n// the minified code by reducing x.call() to merely x()\n// See Mark Miller’s explanation of what this does.\n// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming\nvar call = Function.call;\nfunction uncurryThis(f) {\n    return function () {\n        return call.apply(f, arguments);\n    };\n}\n// This is equivalent, but slower:\n// uncurryThis = Function_bind.bind(Function_bind.call);\n// http://jsperf.com/uncurrythis\n\nvar array_slice = uncurryThis(Array.prototype.slice);\n\nvar array_reduce = uncurryThis(\n    Array.prototype.reduce || function (callback, basis) {\n        var index = 0,\n            length = this.length;\n        // concerning the initial value, if one is not provided\n        if (arguments.length === 1) {\n            // seek to the first value in the array, accounting\n            // for the possibility that is is a sparse array\n            do {\n                if (index in this) {\n                    basis = this[index++];\n                    break;\n                }\n                if (++index >= length) {\n                    throw new TypeError();\n                }\n            } while (1);\n        }\n        // reduce\n        for (; index < length; index++) {\n            // account for the possibility that the array is sparse\n            if (index in this) {\n                basis = callback(basis, this[index], index);\n            }\n        }\n        return basis;\n    }\n);\n\nvar array_indexOf = uncurryThis(\n    Array.prototype.indexOf || function (value) {\n        // not a very good shim, but good enough for our one use of it\n        for (var i = 0; i < this.length; i++) {\n            if (this[i] === value) {\n                return i;\n            }\n        }\n        return -1;\n    }\n);\n\nvar array_map = uncurryThis(\n    Array.prototype.map || function (callback, thisp) {\n        var self = this;\n        var collect = [];\n        array_reduce(self, function (undefined, value, index) {\n            collect.push(callback.call(thisp, value, index, self));\n        }, void 0);\n        return collect;\n    }\n);\n\nvar object_create = Object.create || function (prototype) {\n    function Type() { }\n    Type.prototype = prototype;\n    return new Type();\n};\n\nvar object_defineProperty = Object.defineProperty || function (obj, prop, descriptor) {\n    obj[prop] = descriptor.value;\n    return obj;\n};\n\nvar object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);\n\nvar object_keys = Object.keys || function (object) {\n    var keys = [];\n    for (var key in object) {\n        if (object_hasOwnProperty(object, key)) {\n            keys.push(key);\n        }\n    }\n    return keys;\n};\n\nvar object_toString = uncurryThis(Object.prototype.toString);\n\nfunction isObject(value) {\n    return value === Object(value);\n}\n\n// generator related shims\n\n// FIXME: Remove this function once ES6 generators are in SpiderMonkey.\nfunction isStopIteration(exception) {\n    return (\n        object_toString(exception) === \"[object StopIteration]\" ||\n        exception instanceof QReturnValue\n    );\n}\n\n// FIXME: Remove this helper and Q.return once ES6 generators are in\n// SpiderMonkey.\nvar QReturnValue;\nif (typeof ReturnValue !== \"undefined\") {\n    QReturnValue = ReturnValue;\n} else {\n    QReturnValue = function (value) {\n        this.value = value;\n    };\n}\n\n// long stack traces\n\nvar STACK_JUMP_SEPARATOR = \"From previous event:\";\n\nfunction makeStackTraceLong(error, promise) {\n    // If possible, transform the error stack trace by removing Node and Q\n    // cruft, then concatenating with the stack trace of `promise`. See #57.\n    if (hasStacks &&\n        promise.stack &&\n        typeof error === \"object\" &&\n        error !== null &&\n        error.stack\n    ) {\n        var stacks = [];\n        for (var p = promise; !!p; p = p.source) {\n            if (p.stack && (!error.__minimumStackCounter__ || error.__minimumStackCounter__ > p.stackCounter)) {\n                object_defineProperty(error, \"__minimumStackCounter__\", {value: p.stackCounter, configurable: true});\n                stacks.unshift(p.stack);\n            }\n        }\n        stacks.unshift(error.stack);\n\n        var concatedStacks = stacks.join(\"\\n\" + STACK_JUMP_SEPARATOR + \"\\n\");\n        var stack = filterStackString(concatedStacks);\n        object_defineProperty(error, \"stack\", {value: stack, configurable: true});\n    }\n}\n\nfunction filterStackString(stackString) {\n    var lines = stackString.split(\"\\n\");\n    var desiredLines = [];\n    for (var i = 0; i < lines.length; ++i) {\n        var line = lines[i];\n\n        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {\n            desiredLines.push(line);\n        }\n    }\n    return desiredLines.join(\"\\n\");\n}\n\nfunction isNodeFrame(stackLine) {\n    return stackLine.indexOf(\"(module.js:\") !== -1 ||\n           stackLine.indexOf(\"(node.js:\") !== -1;\n}\n\nfunction getFileNameAndLineNumber(stackLine) {\n    // Named functions: \"at functionName (filename:lineNumber:columnNumber)\"\n    // In IE10 function name can have spaces (\"Anonymous function\") O_o\n    var attempt1 = /at .+ \\((.+):(\\d+):(?:\\d+)\\)$/.exec(stackLine);\n    if (attempt1) {\n        return [attempt1[1], Number(attempt1[2])];\n    }\n\n    // Anonymous functions: \"at filename:lineNumber:columnNumber\"\n    var attempt2 = /at ([^ ]+):(\\d+):(?:\\d+)$/.exec(stackLine);\n    if (attempt2) {\n        return [attempt2[1], Number(attempt2[2])];\n    }\n\n    // Firefox style: \"function@filename:lineNumber or @filename:lineNumber\"\n    var attempt3 = /.*@(.+):(\\d+)$/.exec(stackLine);\n    if (attempt3) {\n        return [attempt3[1], Number(attempt3[2])];\n    }\n}\n\nfunction isInternalFrame(stackLine) {\n    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);\n\n    if (!fileNameAndLineNumber) {\n        return false;\n    }\n\n    var fileName = fileNameAndLineNumber[0];\n    var lineNumber = fileNameAndLineNumber[1];\n\n    return fileName === qFileName &&\n        lineNumber >= qStartingLine &&\n        lineNumber <= qEndingLine;\n}\n\n// discover own file name and line number range for filtering stack\n// traces\nfunction captureLine() {\n    if (!hasStacks) {\n        return;\n    }\n\n    try {\n        throw new Error();\n    } catch (e) {\n        var lines = e.stack.split(\"\\n\");\n        var firstLine = lines[0].indexOf(\"@\") > 0 ? lines[1] : lines[2];\n        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);\n        if (!fileNameAndLineNumber) {\n            return;\n        }\n\n        qFileName = fileNameAndLineNumber[0];\n        return fileNameAndLineNumber[1];\n    }\n}\n\nfunction deprecate(callback, name, alternative) {\n    return function () {\n        if (typeof console !== \"undefined\" &&\n            typeof console.warn === \"function\") {\n            console.warn(name + \" is deprecated, use \" + alternative +\n                         \" instead.\", new Error(\"\").stack);\n        }\n        return callback.apply(callback, arguments);\n    };\n}\n\n// end of shims\n// beginning of real work\n\n/**\n * Constructs a promise for an immediate reference, passes promises through, or\n * coerces promises from different systems.\n * @param value immediate reference or promise\n */\nfunction Q(value) {\n    // If the object is already a Promise, return it directly.  This enables\n    // the resolve function to both be used to created references from objects,\n    // but to tolerably coerce non-promises to promises.\n    if (value instanceof Promise) {\n        return value;\n    }\n\n    // assimilate thenables\n    if (isPromiseAlike(value)) {\n        return coerce(value);\n    } else {\n        return fulfill(value);\n    }\n}\nQ.resolve = Q;\n\n/**\n * Performs a task in a future turn of the event loop.\n * @param {Function} task\n */\nQ.nextTick = nextTick;\n\n/**\n * Controls whether or not long stack traces will be on\n */\nQ.longStackSupport = false;\n\n/**\n * The counter is used to determine the stopping point for building\n * long stack traces. In makeStackTraceLong we walk backwards through\n * the linked list of promises, only stacks which were created before\n * the rejection are concatenated.\n */\nvar longStackCounter = 1;\n\n// enable long stacks if Q_DEBUG is set\nif (typeof process === \"object\" && process && process.env && process.env.Q_DEBUG) {\n    Q.longStackSupport = true;\n}\n\n/**\n * Constructs a {promise, resolve, reject} object.\n *\n * `resolve` is a callback to invoke with a more resolved value for the\n * promise. To fulfill the promise, invoke `resolve` with any value that is\n * not a thenable. To reject the promise, invoke `resolve` with a rejected\n * thenable, or invoke `reject` with the reason directly. To resolve the\n * promise to another thenable, thus putting it in the same state, invoke\n * `resolve` with that other thenable.\n */\nQ.defer = defer;\nfunction defer() {\n    // if \"messages\" is an \"Array\", that indicates that the promise has not yet\n    // been resolved.  If it is \"undefined\", it has been resolved.  Each\n    // element of the messages array is itself an array of complete arguments to\n    // forward to the resolved promise.  We coerce the resolution value to a\n    // promise using the `resolve` function because it handles both fully\n    // non-thenable values and other thenables gracefully.\n    var messages = [], progressListeners = [], resolvedPromise;\n\n    var deferred = object_create(defer.prototype);\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, operands) {\n        var args = array_slice(arguments);\n        if (messages) {\n            messages.push(args);\n            if (op === \"when\" && operands[1]) { // progress operand\n                progressListeners.push(operands[1]);\n            }\n        } else {\n            Q.nextTick(function () {\n                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);\n            });\n        }\n    };\n\n    // XXX deprecated\n    promise.valueOf = function () {\n        if (messages) {\n            return promise;\n        }\n        var nearerValue = nearer(resolvedPromise);\n        if (isPromise(nearerValue)) {\n            resolvedPromise = nearerValue; // shorten chain\n        }\n        return nearerValue;\n    };\n\n    promise.inspect = function () {\n        if (!resolvedPromise) {\n            return { state: \"pending\" };\n        }\n        return resolvedPromise.inspect();\n    };\n\n    if (Q.longStackSupport && hasStacks) {\n        try {\n            throw new Error();\n        } catch (e) {\n            // NOTE: don't try to use `Error.captureStackTrace` or transfer the\n            // accessor around; that causes memory leaks as per GH-111. Just\n            // reify the stack trace as a string ASAP.\n            //\n            // At the same time, cut off the first line; it's always just\n            // \"[object Promise]\\n\", as per the `toString`.\n            promise.stack = e.stack.substring(e.stack.indexOf(\"\\n\") + 1);\n            promise.stackCounter = longStackCounter++;\n        }\n    }\n\n    // NOTE: we do the checks for `resolvedPromise` in each method, instead of\n    // consolidating them into `become`, since otherwise we'd create new\n    // promises with the lines `become(whatever(value))`. See e.g. GH-252.\n\n    function become(newPromise) {\n        resolvedPromise = newPromise;\n\n        if (Q.longStackSupport && hasStacks) {\n            // Only hold a reference to the new promise if long stacks\n            // are enabled to reduce memory usage\n            promise.source = newPromise;\n        }\n\n        array_reduce(messages, function (undefined, message) {\n            Q.nextTick(function () {\n                newPromise.promiseDispatch.apply(newPromise, message);\n            });\n        }, void 0);\n\n        messages = void 0;\n        progressListeners = void 0;\n    }\n\n    deferred.promise = promise;\n    deferred.resolve = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(Q(value));\n    };\n\n    deferred.fulfill = function (value) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(fulfill(value));\n    };\n    deferred.reject = function (reason) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        become(reject(reason));\n    };\n    deferred.notify = function (progress) {\n        if (resolvedPromise) {\n            return;\n        }\n\n        array_reduce(progressListeners, function (undefined, progressListener) {\n            Q.nextTick(function () {\n                progressListener(progress);\n            });\n        }, void 0);\n    };\n\n    return deferred;\n}\n\n/**\n * Creates a Node-style callback that will resolve or reject the deferred\n * promise.\n * @returns a nodeback\n */\ndefer.prototype.makeNodeResolver = function () {\n    var self = this;\n    return function (error, value) {\n        if (error) {\n            self.reject(error);\n        } else if (arguments.length > 2) {\n            self.resolve(array_slice(arguments, 1));\n        } else {\n            self.resolve(value);\n        }\n    };\n};\n\n/**\n * @param resolver {Function} a function that returns nothing and accepts\n * the resolve, reject, and notify functions for a deferred.\n * @returns a promise that may be resolved with the given resolve and reject\n * functions, or rejected by a thrown exception in resolver\n */\nQ.Promise = promise; // ES6\nQ.promise = promise;\nfunction promise(resolver) {\n    if (typeof resolver !== \"function\") {\n        throw new TypeError(\"resolver must be a function.\");\n    }\n    var deferred = defer();\n    try {\n        resolver(deferred.resolve, deferred.reject, deferred.notify);\n    } catch (reason) {\n        deferred.reject(reason);\n    }\n    return deferred.promise;\n}\n\npromise.race = race; // ES6\npromise.all = all; // ES6\npromise.reject = reject; // ES6\npromise.resolve = Q; // ES6\n\n// XXX experimental.  This method is a way to denote that a local value is\n// serializable and should be immediately dispatched to a remote upon request,\n// instead of passing a reference.\nQ.passByCopy = function (object) {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return object;\n};\n\nPromise.prototype.passByCopy = function () {\n    //freeze(object);\n    //passByCopies.set(object, true);\n    return this;\n};\n\n/**\n * If two promises eventually fulfill to the same value, promises that value,\n * but otherwise rejects.\n * @param x {Any*}\n * @param y {Any*}\n * @returns {Any*} a promise for x and y if they are the same, but a rejection\n * otherwise.\n *\n */\nQ.join = function (x, y) {\n    return Q(x).join(y);\n};\n\nPromise.prototype.join = function (that) {\n    return Q([this, that]).spread(function (x, y) {\n        if (x === y) {\n            // TODO: \"===\" should be Object.is or equiv\n            return x;\n        } else {\n            throw new Error(\"Q can't join: not the same: \" + x + \" \" + y);\n        }\n    });\n};\n\n/**\n * Returns a promise for the first of an array of promises to become settled.\n * @param answers {Array[Any*]} promises to race\n * @returns {Any*} the first promise to be settled\n */\nQ.race = race;\nfunction race(answerPs) {\n    return promise(function (resolve, reject) {\n        // Switch to this once we can assume at least ES5\n        // answerPs.forEach(function (answerP) {\n        //     Q(answerP).then(resolve, reject);\n        // });\n        // Use this in the meantime\n        for (var i = 0, len = answerPs.length; i < len; i++) {\n            Q(answerPs[i]).then(resolve, reject);\n        }\n    });\n}\n\nPromise.prototype.race = function () {\n    return this.then(Q.race);\n};\n\n/**\n * Constructs a Promise with a promise descriptor object and optional fallback\n * function.  The descriptor contains methods like when(rejected), get(name),\n * set(name, value), post(name, args), and delete(name), which all\n * return either a value, a promise for a value, or a rejection.  The fallback\n * accepts the operation name, a resolver, and any further arguments that would\n * have been forwarded to the appropriate method above had a method been\n * provided with the proper name.  The API makes no guarantees about the nature\n * of the returned object, apart from that it is usable whereever promises are\n * bought and sold.\n */\nQ.makePromise = Promise;\nfunction Promise(descriptor, fallback, inspect) {\n    if (fallback === void 0) {\n        fallback = function (op) {\n            return reject(new Error(\n                \"Promise does not support operation: \" + op\n            ));\n        };\n    }\n    if (inspect === void 0) {\n        inspect = function () {\n            return {state: \"unknown\"};\n        };\n    }\n\n    var promise = object_create(Promise.prototype);\n\n    promise.promiseDispatch = function (resolve, op, args) {\n        var result;\n        try {\n            if (descriptor[op]) {\n                result = descriptor[op].apply(promise, args);\n            } else {\n                result = fallback.call(promise, op, args);\n            }\n        } catch (exception) {\n            result = reject(exception);\n        }\n        if (resolve) {\n            resolve(result);\n        }\n    };\n\n    promise.inspect = inspect;\n\n    // XXX deprecated `valueOf` and `exception` support\n    if (inspect) {\n        var inspected = inspect();\n        if (inspected.state === \"rejected\") {\n            promise.exception = inspected.reason;\n        }\n\n        promise.valueOf = function () {\n            var inspected = inspect();\n            if (inspected.state === \"pending\" ||\n                inspected.state === \"rejected\") {\n                return promise;\n            }\n            return inspected.value;\n        };\n    }\n\n    return promise;\n}\n\nPromise.prototype.toString = function () {\n    return \"[object Promise]\";\n};\n\nPromise.prototype.then = function (fulfilled, rejected, progressed) {\n    var self = this;\n    var deferred = defer();\n    var done = false;   // ensure the untrusted promise makes at most a\n                        // single call to one of the callbacks\n\n    function _fulfilled(value) {\n        try {\n            return typeof fulfilled === \"function\" ? fulfilled(value) : value;\n        } catch (exception) {\n            return reject(exception);\n        }\n    }\n\n    function _rejected(exception) {\n        if (typeof rejected === \"function\") {\n            makeStackTraceLong(exception, self);\n            try {\n                return rejected(exception);\n            } catch (newException) {\n                return reject(newException);\n            }\n        }\n        return reject(exception);\n    }\n\n    function _progressed(value) {\n        return typeof progressed === \"function\" ? progressed(value) : value;\n    }\n\n    Q.nextTick(function () {\n        self.promiseDispatch(function (value) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_fulfilled(value));\n        }, \"when\", [function (exception) {\n            if (done) {\n                return;\n            }\n            done = true;\n\n            deferred.resolve(_rejected(exception));\n        }]);\n    });\n\n    // Progress propagator need to be attached in the current tick.\n    self.promiseDispatch(void 0, \"when\", [void 0, function (value) {\n        var newValue;\n        var threw = false;\n        try {\n            newValue = _progressed(value);\n        } catch (e) {\n            threw = true;\n            if (Q.onerror) {\n                Q.onerror(e);\n            } else {\n                throw e;\n            }\n        }\n\n        if (!threw) {\n            deferred.notify(newValue);\n        }\n    }]);\n\n    return deferred.promise;\n};\n\nQ.tap = function (promise, callback) {\n    return Q(promise).tap(callback);\n};\n\n/**\n * Works almost like \"finally\", but not called for rejections.\n * Original resolution value is passed through callback unaffected.\n * Callback may return a promise that will be awaited for.\n * @param {Function} callback\n * @returns {Q.Promise}\n * @example\n * doSomething()\n *   .then(...)\n *   .tap(console.log)\n *   .then(...);\n */\nPromise.prototype.tap = function (callback) {\n    callback = Q(callback);\n\n    return this.then(function (value) {\n        return callback.fcall(value).thenResolve(value);\n    });\n};\n\n/**\n * Registers an observer on a promise.\n *\n * Guarantees:\n *\n * 1. that fulfilled and rejected will be called only once.\n * 2. that either the fulfilled callback or the rejected callback will be\n *    called, but not both.\n * 3. that fulfilled and rejected will not be called in this turn.\n *\n * @param value      promise or immediate reference to observe\n * @param fulfilled  function to be called with the fulfilled value\n * @param rejected   function to be called with the rejection exception\n * @param progressed function to be called on any progress notifications\n * @return promise for the return value from the invoked callback\n */\nQ.when = when;\nfunction when(value, fulfilled, rejected, progressed) {\n    return Q(value).then(fulfilled, rejected, progressed);\n}\n\nPromise.prototype.thenResolve = function (value) {\n    return this.then(function () { return value; });\n};\n\nQ.thenResolve = function (promise, value) {\n    return Q(promise).thenResolve(value);\n};\n\nPromise.prototype.thenReject = function (reason) {\n    return this.then(function () { throw reason; });\n};\n\nQ.thenReject = function (promise, reason) {\n    return Q(promise).thenReject(reason);\n};\n\n/**\n * If an object is not a promise, it is as \"near\" as possible.\n * If a promise is rejected, it is as \"near\" as possible too.\n * If it’s a fulfilled promise, the fulfillment value is nearer.\n * If it’s a deferred promise and the deferred has been resolved, the\n * resolution is \"nearer\".\n * @param object\n * @returns most resolved (nearest) form of the object\n */\n\n// XXX should we re-do this?\nQ.nearer = nearer;\nfunction nearer(value) {\n    if (isPromise(value)) {\n        var inspected = value.inspect();\n        if (inspected.state === \"fulfilled\") {\n            return inspected.value;\n        }\n    }\n    return value;\n}\n\n/**\n * @returns whether the given object is a promise.\n * Otherwise it is a fulfilled value.\n */\nQ.isPromise = isPromise;\nfunction isPromise(object) {\n    return object instanceof Promise;\n}\n\nQ.isPromiseAlike = isPromiseAlike;\nfunction isPromiseAlike(object) {\n    return isObject(object) && typeof object.then === \"function\";\n}\n\n/**\n * @returns whether the given object is a pending promise, meaning not\n * fulfilled or rejected.\n */\nQ.isPending = isPending;\nfunction isPending(object) {\n    return isPromise(object) && object.inspect().state === \"pending\";\n}\n\nPromise.prototype.isPending = function () {\n    return this.inspect().state === \"pending\";\n};\n\n/**\n * @returns whether the given object is a value or fulfilled\n * promise.\n */\nQ.isFulfilled = isFulfilled;\nfunction isFulfilled(object) {\n    return !isPromise(object) || object.inspect().state === \"fulfilled\";\n}\n\nPromise.prototype.isFulfilled = function () {\n    return this.inspect().state === \"fulfilled\";\n};\n\n/**\n * @returns whether the given object is a rejected promise.\n */\nQ.isRejected = isRejected;\nfunction isRejected(object) {\n    return isPromise(object) && object.inspect().state === \"rejected\";\n}\n\nPromise.prototype.isRejected = function () {\n    return this.inspect().state === \"rejected\";\n};\n\n//// BEGIN UNHANDLED REJECTION TRACKING\n\n// This promise library consumes exceptions thrown in handlers so they can be\n// handled by a subsequent promise.  The exceptions get added to this array when\n// they are created, and removed when they are handled.  Note that in ES6 or\n// shimmed environments, this would naturally be a `Set`.\nvar unhandledReasons = [];\nvar unhandledRejections = [];\nvar reportedUnhandledRejections = [];\nvar trackUnhandledRejections = true;\n\nfunction resetUnhandledRejections() {\n    unhandledReasons.length = 0;\n    unhandledRejections.length = 0;\n\n    if (!trackUnhandledRejections) {\n        trackUnhandledRejections = true;\n    }\n}\n\nfunction trackRejection(promise, reason) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n    if (typeof process === \"object\" && typeof process.emit === \"function\") {\n        Q.nextTick.runAfter(function () {\n            if (array_indexOf(unhandledRejections, promise) !== -1) {\n                process.emit(\"unhandledRejection\", reason, promise);\n                reportedUnhandledRejections.push(promise);\n            }\n        });\n    }\n\n    unhandledRejections.push(promise);\n    if (reason && typeof reason.stack !== \"undefined\") {\n        unhandledReasons.push(reason.stack);\n    } else {\n        unhandledReasons.push(\"(no stack) \" + reason);\n    }\n}\n\nfunction untrackRejection(promise) {\n    if (!trackUnhandledRejections) {\n        return;\n    }\n\n    var at = array_indexOf(unhandledRejections, promise);\n    if (at !== -1) {\n        if (typeof process === \"object\" && typeof process.emit === \"function\") {\n            Q.nextTick.runAfter(function () {\n                var atReport = array_indexOf(reportedUnhandledRejections, promise);\n                if (atReport !== -1) {\n                    process.emit(\"rejectionHandled\", unhandledReasons[at], promise);\n                    reportedUnhandledRejections.splice(atReport, 1);\n                }\n            });\n        }\n        unhandledRejections.splice(at, 1);\n        unhandledReasons.splice(at, 1);\n    }\n}\n\nQ.resetUnhandledRejections = resetUnhandledRejections;\n\nQ.getUnhandledReasons = function () {\n    // Make a copy so that consumers can't interfere with our internal state.\n    return unhandledReasons.slice();\n};\n\nQ.stopUnhandledRejectionTracking = function () {\n    resetUnhandledRejections();\n    trackUnhandledRejections = false;\n};\n\nresetUnhandledRejections();\n\n//// END UNHANDLED REJECTION TRACKING\n\n/**\n * Constructs a rejected promise.\n * @param reason value describing the failure\n */\nQ.reject = reject;\nfunction reject(reason) {\n    var rejection = Promise({\n        \"when\": function (rejected) {\n            // note that the error has been handled\n            if (rejected) {\n                untrackRejection(this);\n            }\n            return rejected ? rejected(reason) : this;\n        }\n    }, function fallback() {\n        return this;\n    }, function inspect() {\n        return { state: \"rejected\", reason: reason };\n    });\n\n    // Note that the reason has not been handled.\n    trackRejection(rejection, reason);\n\n    return rejection;\n}\n\n/**\n * Constructs a fulfilled promise for an immediate reference.\n * @param value immediate reference\n */\nQ.fulfill = fulfill;\nfunction fulfill(value) {\n    return Promise({\n        \"when\": function () {\n            return value;\n        },\n        \"get\": function (name) {\n            return value[name];\n        },\n        \"set\": function (name, rhs) {\n            value[name] = rhs;\n        },\n        \"delete\": function (name) {\n            delete value[name];\n        },\n        \"post\": function (name, args) {\n            // Mark Miller proposes that post with no name should apply a\n            // promised function.\n            if (name === null || name === void 0) {\n                return value.apply(void 0, args);\n            } else {\n                return value[name].apply(value, args);\n            }\n        },\n        \"apply\": function (thisp, args) {\n            return value.apply(thisp, args);\n        },\n        \"keys\": function () {\n            return object_keys(value);\n        }\n    }, void 0, function inspect() {\n        return { state: \"fulfilled\", value: value };\n    });\n}\n\n/**\n * Converts thenables to Q promises.\n * @param promise thenable promise\n * @returns a Q promise\n */\nfunction coerce(promise) {\n    var deferred = defer();\n    Q.nextTick(function () {\n        try {\n            promise.then(deferred.resolve, deferred.reject, deferred.notify);\n        } catch (exception) {\n            deferred.reject(exception);\n        }\n    });\n    return deferred.promise;\n}\n\n/**\n * Annotates an object such that it will never be\n * transferred away from this process over any promise\n * communication channel.\n * @param object\n * @returns promise a wrapping of that object that\n * additionally responds to the \"isDef\" message\n * without a rejection.\n */\nQ.master = master;\nfunction master(object) {\n    return Promise({\n        \"isDef\": function () {}\n    }, function fallback(op, args) {\n        return dispatch(object, op, args);\n    }, function () {\n        return Q(object).inspect();\n    });\n}\n\n/**\n * Spreads the values of a promised array of arguments into the\n * fulfillment callback.\n * @param fulfilled callback that receives variadic arguments from the\n * promised array\n * @param rejected callback that receives the exception if the promise\n * is rejected.\n * @returns a promise for the return value or thrown exception of\n * either callback.\n */\nQ.spread = spread;\nfunction spread(value, fulfilled, rejected) {\n    return Q(value).spread(fulfilled, rejected);\n}\n\nPromise.prototype.spread = function (fulfilled, rejected) {\n    return this.all().then(function (array) {\n        return fulfilled.apply(void 0, array);\n    }, rejected);\n};\n\n/**\n * The async function is a decorator for generator functions, turning\n * them into asynchronous generators.  Although generators are only part\n * of the newest ECMAScript 6 drafts, this code does not cause syntax\n * errors in older engines.  This code should continue to work and will\n * in fact improve over time as the language improves.\n *\n * ES6 generators are currently part of V8 version 3.19 with the\n * --harmony-generators runtime flag enabled.  SpiderMonkey has had them\n * for longer, but under an older Python-inspired form.  This function\n * works on both kinds of generators.\n *\n * Decorates a generator function such that:\n *  - it may yield promises\n *  - execution will continue when that promise is fulfilled\n *  - the value of the yield expression will be the fulfilled value\n *  - it returns a promise for the return value (when the generator\n *    stops iterating)\n *  - the decorated function returns a promise for the return value\n *    of the generator or the first rejected promise among those\n *    yielded.\n *  - if an error is thrown in the generator, it propagates through\n *    every following yield until it is caught, or until it escapes\n *    the generator function altogether, and is translated into a\n *    rejection for the promise returned by the decorated generator.\n */\nQ.async = async;\nfunction async(makeGenerator) {\n    return function () {\n        // when verb is \"send\", arg is a value\n        // when verb is \"throw\", arg is an exception\n        function continuer(verb, arg) {\n            var result;\n\n            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only\n            // engine that has a deployed base of browsers that support generators.\n            // However, SM's generators use the Python-inspired semantics of\n            // outdated ES6 drafts.  We would like to support ES6, but we'd also\n            // like to make it possible to use generators in deployed browsers, so\n            // we also support Python-style generators.  At some point we can remove\n            // this block.\n\n            if (typeof StopIteration === \"undefined\") {\n                // ES6 Generators\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    return reject(exception);\n                }\n                if (result.done) {\n                    return Q(result.value);\n                } else {\n                    return when(result.value, callback, errback);\n                }\n            } else {\n                // SpiderMonkey Generators\n                // FIXME: Remove this case when SM does ES6 generators.\n                try {\n                    result = generator[verb](arg);\n                } catch (exception) {\n                    if (isStopIteration(exception)) {\n                        return Q(exception.value);\n                    } else {\n                        return reject(exception);\n                    }\n                }\n                return when(result, callback, errback);\n            }\n        }\n        var generator = makeGenerator.apply(this, arguments);\n        var callback = continuer.bind(continuer, \"next\");\n        var errback = continuer.bind(continuer, \"throw\");\n        return callback();\n    };\n}\n\n/**\n * The spawn function is a small wrapper around async that immediately\n * calls the generator and also ends the promise chain, so that any\n * unhandled errors are thrown instead of forwarded to the error\n * handler. This is useful because it's extremely common to run\n * generators at the top-level to work with libraries.\n */\nQ.spawn = spawn;\nfunction spawn(makeGenerator) {\n    Q.done(Q.async(makeGenerator)());\n}\n\n// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.\n/**\n * Throws a ReturnValue exception to stop an asynchronous generator.\n *\n * This interface is a stop-gap measure to support generator return\n * values in older Firefox/SpiderMonkey.  In browsers that support ES6\n * generators like Chromium 29, just use \"return\" in your generator\n * functions.\n *\n * @param value the return value for the surrounding generator\n * @throws ReturnValue exception with the value.\n * @example\n * // ES6 style\n * Q.async(function* () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      return foo + bar;\n * })\n * // Older SpiderMonkey style\n * Q.async(function () {\n *      var foo = yield getFooPromise();\n *      var bar = yield getBarPromise();\n *      Q.return(foo + bar);\n * })\n */\nQ[\"return\"] = _return;\nfunction _return(value) {\n    throw new QReturnValue(value);\n}\n\n/**\n * The promised function decorator ensures that any promise arguments\n * are settled and passed as values (`this` is also settled and passed\n * as a value).  It will also ensure that the result of a function is\n * always a promise.\n *\n * @example\n * var add = Q.promised(function (a, b) {\n *     return a + b;\n * });\n * add(Q(a), Q(B));\n *\n * @param {function} callback The function to decorate\n * @returns {function} a function that has been decorated.\n */\nQ.promised = promised;\nfunction promised(callback) {\n    return function () {\n        return spread([this, all(arguments)], function (self, args) {\n            return callback.apply(self, args);\n        });\n    };\n}\n\n/**\n * sends a message to a value in a future turn\n * @param object* the recipient\n * @param op the name of the message operation, e.g., \"when\",\n * @param args further arguments to be forwarded to the operation\n * @returns result {Promise} a promise for the result of the operation\n */\nQ.dispatch = dispatch;\nfunction dispatch(object, op, args) {\n    return Q(object).dispatch(op, args);\n}\n\nPromise.prototype.dispatch = function (op, args) {\n    var self = this;\n    var deferred = defer();\n    Q.nextTick(function () {\n        self.promiseDispatch(deferred.resolve, op, args);\n    });\n    return deferred.promise;\n};\n\n/**\n * Gets the value of a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to get\n * @return promise for the property value\n */\nQ.get = function (object, key) {\n    return Q(object).dispatch(\"get\", [key]);\n};\n\nPromise.prototype.get = function (key) {\n    return this.dispatch(\"get\", [key]);\n};\n\n/**\n * Sets the value of a property in a future turn.\n * @param object    promise or immediate reference for object object\n * @param name      name of property to set\n * @param value     new value of property\n * @return promise for the return value\n */\nQ.set = function (object, key, value) {\n    return Q(object).dispatch(\"set\", [key, value]);\n};\n\nPromise.prototype.set = function (key, value) {\n    return this.dispatch(\"set\", [key, value]);\n};\n\n/**\n * Deletes a property in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of property to delete\n * @return promise for the return value\n */\nQ.del = // XXX legacy\nQ[\"delete\"] = function (object, key) {\n    return Q(object).dispatch(\"delete\", [key]);\n};\n\nPromise.prototype.del = // XXX legacy\nPromise.prototype[\"delete\"] = function (key) {\n    return this.dispatch(\"delete\", [key]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param value     a value to post, typically an array of\n *                  invocation arguments for promises that\n *                  are ultimately backed with `resolve` values,\n *                  as opposed to those backed with URLs\n *                  wherein the posted value can be any\n *                  JSON serializable object.\n * @return promise for the return value\n */\n// bound locally because it is used by other methods\nQ.mapply = // XXX As proposed by \"Redsandro\"\nQ.post = function (object, name, args) {\n    return Q(object).dispatch(\"post\", [name, args]);\n};\n\nPromise.prototype.mapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.post = function (name, args) {\n    return this.dispatch(\"post\", [name, args]);\n};\n\n/**\n * Invokes a method in a future turn.\n * @param object    promise or immediate reference for target object\n * @param name      name of method to invoke\n * @param ...args   array of invocation arguments\n * @return promise for the return value\n */\nQ.send = // XXX Mark Miller's proposed parlance\nQ.mcall = // XXX As proposed by \"Redsandro\"\nQ.invoke = function (object, name /*...args*/) {\n    return Q(object).dispatch(\"post\", [name, array_slice(arguments, 2)]);\n};\n\nPromise.prototype.send = // XXX Mark Miller's proposed parlance\nPromise.prototype.mcall = // XXX As proposed by \"Redsandro\"\nPromise.prototype.invoke = function (name /*...args*/) {\n    return this.dispatch(\"post\", [name, array_slice(arguments, 1)]);\n};\n\n/**\n * Applies the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param args      array of application arguments\n */\nQ.fapply = function (object, args) {\n    return Q(object).dispatch(\"apply\", [void 0, args]);\n};\n\nPromise.prototype.fapply = function (args) {\n    return this.dispatch(\"apply\", [void 0, args]);\n};\n\n/**\n * Calls the promised function in a future turn.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ[\"try\"] =\nQ.fcall = function (object /* ...args*/) {\n    return Q(object).dispatch(\"apply\", [void 0, array_slice(arguments, 1)]);\n};\n\nPromise.prototype.fcall = function (/*...args*/) {\n    return this.dispatch(\"apply\", [void 0, array_slice(arguments)]);\n};\n\n/**\n * Binds the promised function, transforming return values into a fulfilled\n * promise and thrown errors into a rejected one.\n * @param object    promise or immediate reference for target function\n * @param ...args   array of application arguments\n */\nQ.fbind = function (object /*...args*/) {\n    var promise = Q(object);\n    var args = array_slice(arguments, 1);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\nPromise.prototype.fbind = function (/*...args*/) {\n    var promise = this;\n    var args = array_slice(arguments);\n    return function fbound() {\n        return promise.dispatch(\"apply\", [\n            this,\n            args.concat(array_slice(arguments))\n        ]);\n    };\n};\n\n/**\n * Requests the names of the owned properties of a promised\n * object in a future turn.\n * @param object    promise or immediate reference for target object\n * @return promise for the keys of the eventually settled object\n */\nQ.keys = function (object) {\n    return Q(object).dispatch(\"keys\", []);\n};\n\nPromise.prototype.keys = function () {\n    return this.dispatch(\"keys\", []);\n};\n\n/**\n * Turns an array of promises into a promise for an array.  If any of\n * the promises gets rejected, the whole array is rejected immediately.\n * @param {Array*} an array (or promise for an array) of values (or\n * promises for values)\n * @returns a promise for an array of the corresponding values\n */\n// By Mark Miller\n// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled\nQ.all = all;\nfunction all(promises) {\n    return when(promises, function (promises) {\n        var pendingCount = 0;\n        var deferred = defer();\n        array_reduce(promises, function (undefined, promise, index) {\n            var snapshot;\n            if (\n                isPromise(promise) &&\n                (snapshot = promise.inspect()).state === \"fulfilled\"\n            ) {\n                promises[index] = snapshot.value;\n            } else {\n                ++pendingCount;\n                when(\n                    promise,\n                    function (value) {\n                        promises[index] = value;\n                        if (--pendingCount === 0) {\n                            deferred.resolve(promises);\n                        }\n                    },\n                    deferred.reject,\n                    function (progress) {\n                        deferred.notify({ index: index, value: progress });\n                    }\n                );\n            }\n        }, void 0);\n        if (pendingCount === 0) {\n            deferred.resolve(promises);\n        }\n        return deferred.promise;\n    });\n}\n\nPromise.prototype.all = function () {\n    return all(this);\n};\n\n/**\n * Returns the first resolved promise of an array. Prior rejected promises are\n * ignored.  Rejects only if all promises are rejected.\n * @param {Array*} an array containing values or promises for values\n * @returns a promise fulfilled with the value of the first resolved promise,\n * or a rejected promise if all promises are rejected.\n */\nQ.any = any;\n\nfunction any(promises) {\n    if (promises.length === 0) {\n        return Q.resolve();\n    }\n\n    var deferred = Q.defer();\n    var pendingCount = 0;\n    array_reduce(promises, function (prev, current, index) {\n        var promise = promises[index];\n\n        pendingCount++;\n\n        when(promise, onFulfilled, onRejected, onProgress);\n        function onFulfilled(result) {\n            deferred.resolve(result);\n        }\n        function onRejected(err) {\n            pendingCount--;\n            if (pendingCount === 0) {\n                var rejection = err || new Error(\"\" + err);\n\n                rejection.message = (\"Q can't get fulfillment value from any promise, all \" +\n                    \"promises were rejected. Last error message: \" + rejection.message);\n\n                deferred.reject(rejection);\n            }\n        }\n        function onProgress(progress) {\n            deferred.notify({\n                index: index,\n                value: progress\n            });\n        }\n    }, undefined);\n\n    return deferred.promise;\n}\n\nPromise.prototype.any = function () {\n    return any(this);\n};\n\n/**\n * Waits for all promises to be settled, either fulfilled or\n * rejected.  This is distinct from `all` since that would stop\n * waiting at the first rejection.  The promise returned by\n * `allResolved` will never be rejected.\n * @param promises a promise for an array (or an array) of promises\n * (or values)\n * @return a promise for an array of promises\n */\nQ.allResolved = deprecate(allResolved, \"allResolved\", \"allSettled\");\nfunction allResolved(promises) {\n    return when(promises, function (promises) {\n        promises = array_map(promises, Q);\n        return when(all(array_map(promises, function (promise) {\n            return when(promise, noop, noop);\n        })), function () {\n            return promises;\n        });\n    });\n}\n\nPromise.prototype.allResolved = function () {\n    return allResolved(this);\n};\n\n/**\n * @see Promise#allSettled\n */\nQ.allSettled = allSettled;\nfunction allSettled(promises) {\n    return Q(promises).allSettled();\n}\n\n/**\n * Turns an array of promises into a promise for an array of their states (as\n * returned by `inspect`) when they have all settled.\n * @param {Array[Any*]} values an array (or promise for an array) of values (or\n * promises for values)\n * @returns {Array[State]} an array of states for the respective values.\n */\nPromise.prototype.allSettled = function () {\n    return this.then(function (promises) {\n        return all(array_map(promises, function (promise) {\n            promise = Q(promise);\n            function regardless() {\n                return promise.inspect();\n            }\n            return promise.then(regardless, regardless);\n        }));\n    });\n};\n\n/**\n * Captures the failure of a promise, giving an oportunity to recover\n * with a callback.  If the given promise is fulfilled, the returned\n * promise is fulfilled.\n * @param {Any*} promise for something\n * @param {Function} callback to fulfill the returned promise if the\n * given promise is rejected\n * @returns a promise for the return value of the callback\n */\nQ.fail = // XXX legacy\nQ[\"catch\"] = function (object, rejected) {\n    return Q(object).then(void 0, rejected);\n};\n\nPromise.prototype.fail = // XXX legacy\nPromise.prototype[\"catch\"] = function (rejected) {\n    return this.then(void 0, rejected);\n};\n\n/**\n * Attaches a listener that can respond to progress notifications from a\n * promise's originating deferred. This listener receives the exact arguments\n * passed to ``deferred.notify``.\n * @param {Any*} promise for something\n * @param {Function} callback to receive any progress notifications\n * @returns the given promise, unchanged\n */\nQ.progress = progress;\nfunction progress(object, progressed) {\n    return Q(object).then(void 0, void 0, progressed);\n}\n\nPromise.prototype.progress = function (progressed) {\n    return this.then(void 0, void 0, progressed);\n};\n\n/**\n * Provides an opportunity to observe the settling of a promise,\n * regardless of whether the promise is fulfilled or rejected.  Forwards\n * the resolution to the returned promise when the callback is done.\n * The callback can return a promise to defer completion.\n * @param {Any*} promise\n * @param {Function} callback to observe the resolution of the given\n * promise, takes no arguments.\n * @returns a promise for the resolution of the given promise when\n * ``fin`` is done.\n */\nQ.fin = // XXX legacy\nQ[\"finally\"] = function (object, callback) {\n    return Q(object)[\"finally\"](callback);\n};\n\nPromise.prototype.fin = // XXX legacy\nPromise.prototype[\"finally\"] = function (callback) {\n    if (!callback || typeof callback.apply !== \"function\") {\n        throw new Error(\"Q can't apply finally callback\");\n    }\n    callback = Q(callback);\n    return this.then(function (value) {\n        return callback.fcall().then(function () {\n            return value;\n        });\n    }, function (reason) {\n        // TODO attempt to recycle the rejection with \"this\".\n        return callback.fcall().then(function () {\n            throw reason;\n        });\n    });\n};\n\n/**\n * Terminates a chain of promises, forcing rejections to be\n * thrown as exceptions.\n * @param {Any*} promise at the end of a chain of promises\n * @returns nothing\n */\nQ.done = function (object, fulfilled, rejected, progress) {\n    return Q(object).done(fulfilled, rejected, progress);\n};\n\nPromise.prototype.done = function (fulfilled, rejected, progress) {\n    var onUnhandledError = function (error) {\n        // forward to a future turn so that ``when``\n        // does not catch it and turn it into a rejection.\n        Q.nextTick(function () {\n            makeStackTraceLong(error, promise);\n            if (Q.onerror) {\n                Q.onerror(error);\n            } else {\n                throw error;\n            }\n        });\n    };\n\n    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.\n    var promise = fulfilled || rejected || progress ?\n        this.then(fulfilled, rejected, progress) :\n        this;\n\n    if (typeof process === \"object\" && process && process.domain) {\n        onUnhandledError = process.domain.bind(onUnhandledError);\n    }\n\n    promise.then(void 0, onUnhandledError);\n};\n\n/**\n * Causes a promise to be rejected if it does not get fulfilled before\n * some milliseconds time out.\n * @param {Any*} promise\n * @param {Number} milliseconds timeout\n * @param {Any*} custom error message or Error object (optional)\n * @returns a promise for the resolution of the given promise if it is\n * fulfilled before the timeout, otherwise rejected.\n */\nQ.timeout = function (object, ms, error) {\n    return Q(object).timeout(ms, error);\n};\n\nPromise.prototype.timeout = function (ms, error) {\n    var deferred = defer();\n    var timeoutId = setTimeout(function () {\n        if (!error || \"string\" === typeof error) {\n            error = new Error(error || \"Timed out after \" + ms + \" ms\");\n            error.code = \"ETIMEDOUT\";\n        }\n        deferred.reject(error);\n    }, ms);\n\n    this.then(function (value) {\n        clearTimeout(timeoutId);\n        deferred.resolve(value);\n    }, function (exception) {\n        clearTimeout(timeoutId);\n        deferred.reject(exception);\n    }, deferred.notify);\n\n    return deferred.promise;\n};\n\n/**\n * Returns a promise for the given value (or promised value), some\n * milliseconds after it resolved. Passes rejections immediately.\n * @param {Any*} promise\n * @param {Number} milliseconds\n * @returns a promise for the resolution of the given promise after milliseconds\n * time has elapsed since the resolution of the given promise.\n * If the given promise rejects, that is passed immediately.\n */\nQ.delay = function (object, timeout) {\n    if (timeout === void 0) {\n        timeout = object;\n        object = void 0;\n    }\n    return Q(object).delay(timeout);\n};\n\nPromise.prototype.delay = function (timeout) {\n    return this.then(function (value) {\n        var deferred = defer();\n        setTimeout(function () {\n            deferred.resolve(value);\n        }, timeout);\n        return deferred.promise;\n    });\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided as an array, and returns a promise.\n *\n *      Q.nfapply(FS.readFile, [__filename])\n *      .then(function (content) {\n *      })\n *\n */\nQ.nfapply = function (callback, args) {\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfapply = function (args) {\n    var deferred = defer();\n    var nodeArgs = array_slice(args);\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Passes a continuation to a Node function, which is called with the given\n * arguments provided individually, and returns a promise.\n * @example\n * Q.nfcall(FS.readFile, __filename)\n * .then(function (content) {\n * })\n *\n */\nQ.nfcall = function (callback /*...args*/) {\n    var args = array_slice(arguments, 1);\n    return Q(callback).nfapply(args);\n};\n\nPromise.prototype.nfcall = function (/*...args*/) {\n    var nodeArgs = array_slice(arguments);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.fapply(nodeArgs).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Wraps a NodeJS continuation passing function and returns an equivalent\n * version that returns a promise.\n * @example\n * Q.nfbind(FS.readFile, __filename)(\"utf-8\")\n * .then(console.log)\n * .done()\n */\nQ.nfbind =\nQ.denodeify = function (callback /*...args*/) {\n    if (callback === undefined) {\n        throw new Error(\"Q can't wrap an undefined function\");\n    }\n    var baseArgs = array_slice(arguments, 1);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        Q(callback).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nfbind =\nPromise.prototype.denodeify = function (/*...args*/) {\n    var args = array_slice(arguments);\n    args.unshift(this);\n    return Q.denodeify.apply(void 0, args);\n};\n\nQ.nbind = function (callback, thisp /*...args*/) {\n    var baseArgs = array_slice(arguments, 2);\n    return function () {\n        var nodeArgs = baseArgs.concat(array_slice(arguments));\n        var deferred = defer();\n        nodeArgs.push(deferred.makeNodeResolver());\n        function bound() {\n            return callback.apply(thisp, arguments);\n        }\n        Q(bound).fapply(nodeArgs).fail(deferred.reject);\n        return deferred.promise;\n    };\n};\n\nPromise.prototype.nbind = function (/*thisp, ...args*/) {\n    var args = array_slice(arguments, 0);\n    args.unshift(this);\n    return Q.nbind.apply(void 0, args);\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback with a given array of arguments, plus a provided callback.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param {Array} args arguments to pass to the method; the callback\n * will be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nmapply = // XXX As proposed by \"Redsandro\"\nQ.npost = function (object, name, args) {\n    return Q(object).npost(name, args);\n};\n\nPromise.prototype.nmapply = // XXX As proposed by \"Redsandro\"\nPromise.prototype.npost = function (name, args) {\n    var nodeArgs = array_slice(args || []);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * Calls a method of a Node-style object that accepts a Node-style\n * callback, forwarding the given variadic arguments, plus a provided\n * callback argument.\n * @param object an object that has the named method\n * @param {String} name name of the method of object\n * @param ...args arguments to pass to the method; the callback will\n * be provided by Q and appended to these arguments.\n * @returns a promise for the value or error\n */\nQ.nsend = // XXX Based on Mark Miller's proposed \"send\"\nQ.nmcall = // XXX Based on \"Redsandro's\" proposal\nQ.ninvoke = function (object, name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 2);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    Q(object).dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\nPromise.prototype.nsend = // XXX Based on Mark Miller's proposed \"send\"\nPromise.prototype.nmcall = // XXX Based on \"Redsandro's\" proposal\nPromise.prototype.ninvoke = function (name /*...args*/) {\n    var nodeArgs = array_slice(arguments, 1);\n    var deferred = defer();\n    nodeArgs.push(deferred.makeNodeResolver());\n    this.dispatch(\"post\", [name, nodeArgs]).fail(deferred.reject);\n    return deferred.promise;\n};\n\n/**\n * If a function would like to support both Node continuation-passing-style and\n * promise-returning-style, it can end its internal promise chain with\n * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user\n * elects to use a nodeback, the result will be sent there.  If they do not\n * pass a nodeback, they will receive the result promise.\n * @param object a result (or a promise for a result)\n * @param {Function} nodeback a Node.js-style callback\n * @returns either the promise or nothing\n */\nQ.nodeify = nodeify;\nfunction nodeify(object, nodeback) {\n    return Q(object).nodeify(nodeback);\n}\n\nPromise.prototype.nodeify = function (nodeback) {\n    if (nodeback) {\n        this.then(function (value) {\n            Q.nextTick(function () {\n                nodeback(null, value);\n            });\n        }, function (error) {\n            Q.nextTick(function () {\n                nodeback(error);\n            });\n        });\n    } else {\n        return this;\n    }\n};\n\nQ.noConflict = function() {\n    throw new Error(\"Q.noConflict only works when Q is used as a global\");\n};\n\n// All code before this point will be filtered from stack traces.\nvar qEndingLine = captureLine();\n\nreturn Q;\n\n});\n","const { resolve, reject } = require(\"q\");\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n  \n  const makeTransaction = transaction => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    return promise = new Promise ((resolve, reject) => {\n        setTimeout(() => {\n            const canProcess = Math.random() > 0.3;\n        \n            if (canProcess) {\n              resolve(transaction.id, delay);\n            } else {\n              reject(transaction.id);\n            }\n          }, delay);\n        })\n    }\n  \n  const logSuccess = (id, time) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n  \n  const logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n  \n  /*\n   * Работает так\n   */\n /* makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n  makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n  makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\n  makeTransaction({ id: 73, amount: 100 }, logSuccess, logError); */\n  /*\n   * Должно работать так\n   */\n  makeTransaction({ id: 70, amount: 150 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 71, amount: 230 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 72, amount: 75 })\n    .then(logSuccess)\n    .catch(logError);\n  \n  makeTransaction({ id: 73, amount: 100 })\n    .then(logSuccess)\n    .catch(logError);"]}